1. data collect
    1. add text to indicate max and min temp for data collect \done
    2. allow specification of frame rates \done
    3. when collecting for calibration, should save files under the dir: MSC/calibImages/distance/sensor_type \done

2. Multi-sensor calibration
    1. rename to MSC
        MSC1_corresponding_points.py
        MSC2_calc_transform_param.py
    2. MSC1_corresponding_points.py should save the point in file: MSC/1calibPoints/distance/sensor_type
        a. it should have: python3 MSC1_corresponding_points.py --calib_base_dir <path> --dist <distance at which selection is done> --sensor_type <sensor_type>
    3. MSC2_calc_transform_param.py should save R, T, scale in position: MSC/2calibParams/sensor_type.yaml (careful: repetition of same sensors. Need to check before calculation and manual adjustment)
        a. it should have: python3 MSC2_calc_transform_param.py --dist <distance> --sensor_type <sensor name> 
    
3. transforming images from depth to thermal (thermal-depth alignment)
    1. make a class (Aligner) for doing all these
    2. init: type of sensor (don't need to specify where R, T, scale are saved because by default we save it at: MSC/2calibParams/sensor_type.yaml. each entry in yaml file should take the form <distance>: [R, T, scale])
    3. _align: take one image and align (multi-layer) according to the loaded R, T, scale
    4. align: take a list of images and align them
    5. inspect: take an image from the corresponding sensor and a depth, align depth to sensor, check if they correspond well.


1. why MLX min is 0?
2. for images collected for calibration, need an efficient method to filter out unfit (blurred, without human, postures inconsistent) images


